name: Start job for building through Crave.

on:
  #push:
   # branches:
    #  - main 
  workflow_dispatch:
    inputs:
      BASE_PROJECT:
        description: 'Choose a base project:'
        required: true
        default: 'ArrowOS13'
        type: choice
        options:
          - 'ArrowOS13'
          - 'DerpFest13'
          - 'LineageOS20'
          - 'LineageOS21'
      BUILD_DIFFERENT_ROM:
        description: "Command to initialize a different 'repo' project:"
        required: false
      REMOVALS:
        description: "Folders to be removed before syncing:"
        required: false
      LOCAL_MANIFEST:
        description: "Personal local manifest [repository or raw]:"
        required: true
        default: 'https://github.com/jayz1212/local_manifests'
      LOCAL_MANIFEST_BRANCH:
        description: "Personal local manifest's branch:"
        required: false
        default: 'main'
      PRODUCT_NAME:
        description: "Product to build:"
        required: false
        default: ""
      BUILD_TYPE:
        description: 'Type of build:'
        required: false
        default: '-userdebug'
        type: choice
        options: 
        - '-eng'
        - '-userdebug'
        - '-user' 
      BUILD_COMMAND:
        description: 'Command to be used for compiling:'
        required: false
        default: 'm bacon'
      THE_FORBIDDEN_ONE :
        description: 'Use this command at caution it might delete you project, nahh who cares'
        required: false
        default: ''
      CLEAN_BUILD:
        description: 'Build with a clean workspace? Selecting Yes here will reset the data to its default state removing any of your work'
        required: true
        default: 'no'
        type: choice
        options: 
        - 'yes'
        - 'no'
      # SAY_SOMETHING_NICE :
      #   description: 'anything you want to say'
      #   required: false
      #   default: ''
              
jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Set up Git
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git clean -fdX


      - name: Set up Environment
        run: |
          BASE_PROJECT_NAME="${{ inputs.BASE_PROJECT }}"
          case $BASE_PROJECT_NAME in
            'ArrowOS13') BASE_PROJECT_VALUE='repo init -u https://github.com/ArrowOS/android_manifest.git -b arrow-13.1 --depth=1' ;;
            'DerpFest13') BASE_PROJECT_VALUE='repo init -u https://github.com/DerpFest-AOSP/manifest.git -b 13 --depth=1' ;;
            'LineageOS20') BASE_PROJECT_VALUE='repo init -u https://github.com/accupara/los20.git -b lineage-20.0 --git-lfs --depth=1' ;;
            'LineageOS21') BASE_PROJECT_VALUE='repo init -u https://github.com/LineageOS/android.git -b lineage-21.0 --git-lfs --depth=1' ;;
            *) BASE_PROJECT_VALUE='default-command' ;;  # Provide a default command for unknown options
          esac
          echo "BASE_PROJECT_NAME=$BASE_PROJECT_NAME" >> $GITHUB_ENV
          echo "BASE_PROJECT_VALUE=$BASE_PROJECT_VALUE" >> $GITHUB_ENV

        

      - name: Edit run.sh
        run: |

          if [ "${{ inputs.CLEAN_BUILD }}" == "yes" ]; then
            export CLEAN_FLAG="--clean"
          else
            export CLEAN_FLAG=""
          fi
      

          echo "#!/bin/bash" > run.sh
          echo 'export GH_TOKEN=$(cat gh_token.txt)' >> run.sh
          echo 'gh auth login --with-token $GH_TOKEN' >> run.sh
          echo "gh auth status" >> run.sh
          echo "mkdir -p ${{ inputs.BASE_PROJECT }}" >> run.sh
          echo 'bp=$(cat bp.txt)' >> run.sh
          echo "cp -f crave_rom_builder/run1.sh run1.sh" >> run.sh
          echo "chmod +x run1.sh" >> run.sh
          echo "cp -f crave_rom_builder/craverun.sh ${{ inputs.BASE_PROJECT }}" >> run.sh
          # echo 'tmux set-environment bp "$bp"'>> run.sh
          # echo 'tmux kill-session -t $bp' >> run.sh
          # echo 'tmux new-session -d -s $bp' >> run.sh
          # echo 'tmux list-session -t $bp' >> run.sh
          echo "./run1.sh" >> run.sh
          echo 'echo "$(pwd)" > bp.txt'
          #echo 'tmux send-keys -t $bp C-a C-k './run1.sh'' >> run.sh
          echo 'export GH_TOKEN=$(cat gh_token.txt)' >> run1.sh
          echo 'gh auth login --with-token $GH_TOKEN' >> run1.sh
          echo "cd ${{ inputs.BASE_PROJECT }}" > run1.sh
          echo "${BASE_PROJECT_VALUE}" >> run1.sh
          echo "chmod +x craverun.sh" >> run1.sh
          echo ". craverun.sh" >> run1.sh
          echo "#!/bin/bash" > craverun.sh
          echo "rm -rf crave_rom_builder" >> craverun.sh
          echo 'git clone https://$GH_TOKEN@github.com/${{ github.repository }}.git' >> craverun.sh
          echo  "cp -f crave_rom_builder/a.sh a.sh">> craverun.sh
          echo  "chmod +x a.sh">> craverun.sh
          echo  'basename "$(pwd)"> bp.txt'>> craverun.sh
          echo "crave run --no-patch $CLEAN_FLAG -- \"          #Â© crave.io Inc. 2017-2024" >> craverun.sh
          #echo '"                #Im not a bot'>> craverun.sh
          echo "              #Thanks to UV n Team">> craverun.sh
          echo "        #no dual account just to build faster">> craverun.sh
          echo "              #respect the rule">> craverun.sh
          # echo "#${{ inputs.SAY_SOMETHING_NICE }} ">> craverun.sh
          echo "THE_FORBIDDEN_ONE: ${{ inputs.THE_FORBIDDEN_ONE }}"
          echo "PRODUCT_NAME: ${{ inputs.PRODUCT_NAME }}"
          
          if [ -n "${{ inputs.THE_FORBIDDEN_ONE }}" ] && [ -n "${{ inputs.PRODUCT_NAME }}" ]; then
              echo "Both THE_FORBIDDEN_ONE and PRODUCT_NAME have values. Cannot run this command. Exiting."
              exit 1
          elif [ -n "${{ inputs.THE_FORBIDDEN_ONE }}" ]; then
              echo "${{ inputs.BUILD_DIFFERENT_ROM }}">> craverun.sh
              echo "${{ inputs.THE_FORBIDDEN_ONE }}">> craverun.sh
          else
              echo "${{ inputs.BUILD_DIFFERENT_ROM }}">> craverun.sh
              echo "rm -rf .repo/local_manifests ${{ inputs.REMOVALS }}">> craverun.sh
              echo "git clone ${{ inputs.LOCAL_MANIFEST}} -b ${{ inputs.LOCAL_MANIFEST_BRANCH }} .repo/local_manifests">> craverun.sh
              echo 'repo sync -c -j\$(nproc --all) --force-sync --no-clone-bundle --no-tags'>> craverun.sh
              echo "source build/envsetup.sh">> craverun.sh
              echo "m installclean">> craverun.sh
              echo "lunch ${{ inputs.PRODUCT_NAME }}${{ inputs.BUILD_TYPE }}">> craverun.sh
              echo "${{ inputs.BUILD_COMMAND }}">> craverun.sh
          fi
          
          echo '"'>> craverun.sh
          echo  ". a.sh">> craverun.sh

      

      - name: Check for changes
        id: check_changes
        run: |
          changes=$(git diff --name-only)
          if [ -z "$changes" ]; then
            echo "CHANGES=false" >> $GITHUB_ENV
          else
            echo "CHANGES=true" >> $GITHUB_ENV
          fi

      - name: Commit changes
        if: env.CHANGES == 'true'
        run: |
          git add .
          git commit -m "Update run.sh with commands"
          git status

      - name: Push changes
        if: env.CHANGES == 'true'
        run: |
          git push https://github.com/${{ github.repository }}.git HEAD:test
        env:
          GH_TOKEN: ${{ secrets.PAT }}      

      - name: Set File URL
        id: set_url
        run: echo "::set-output name=url::${{ secrets.GH_TOKEN }}@raw.githubusercontent.com/${{ github.repository }}/main/run.sh"

      #- name: Download File
      #  run: wget -O run.sh "${{ steps.set_url.outputs.url }}"


      - name: Download and Run get_crave.sh
        run: |
          curl -s https://raw.githubusercontent.com/accupara/crave/master/get_crave.sh | bash -s --
          echo '${{ secrets.CONF }}' > crave.conf



      - name: Run Crave
        run: |
          echo "tmux detach-client -s ${{ inputs.BASE_PROJECT }}; tmux new-session -s ${{ inputs.BASE_PROJECT }} \; send-keys -t ${{ inputs.BASE_PROJECT }}:0 \"./run.sh\" C-m"
          
          # Run your commands and continue even if there is an error
          ./crave -c ./crave.conf devspace || true
          ./crave devspace 'echo "${{ secrets.GH_TOKEN }}" > gh_token.txt;export GH_TOKEN=$(cat gh_token.txt);echo "${{ inputs.BASE_PROJECT }}" > bp.txt;bp=$($bp);rm -rf crave_rom_builder;git clone https://$GH_TOKEN@github.com/${{ github.repository }}.git -b test;rm run.sh;cp -f crave_rom_builder/run.sh run.sh;chmod +x run.sh;. run.sh' || true

           if: ${{ cancelled() }}
            crave stop --all


      - name: Display Build URL
        run: |
            echo "Build Sent Check on Foss to verify after a minute"
            echo "Build URL: [https://foss.crave.io/app/#/build?team=14](https://foss.crave.io/app/#/build?team=14)"

